{
  "stats": {
    "suites": 5,
    "tests": 36,
    "passes": 35,
    "pending": 0,
    "failures": 1,
    "start": "2020-08-24T17:51:02.130Z",
    "end": "2020-08-24T17:51:03.638Z",
    "duration": 1508,
    "testsRegistered": 36,
    "passPercent": 97.22222222222221,
    "pendingPercent": 0,
    "other": 0,
    "hasOther": false,
    "skipped": 0,
    "hasSkipped": false
  },
  "results": [
    {
      "uuid": "21c0b770-838f-43b9-8e5d-a6b341247cb7",
      "title": "",
      "fullFile": "",
      "file": "",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "83c74c97-ec44-4012-9532-3382ac54f0e5",
          "title": "User SignIn",
          "fullFile": "/home/akshay/Documents/SDET/sdet-sat/app/test/api_tests/auth_test.js",
          "file": "/app/test/api_tests/auth_test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "user should be logged in with valid credentials",
              "fullTitle": "User SignIn user should be logged in with valid credentials",
              "timedOut": false,
              "duration": 129,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "chai.request(config.base_url)\n            .post(auth_req.end_point)\n            .send(auth_req.credentials)\n            .end((err, res) => {\n                expect(res).to.have.status(200);\n                expect(res.body).to.have.property('status').eql(true);\n                expect(res.body.data).to.have.property('token');\n                expect(res.body.error).to.eql([]);\n                done();\n            });",
              "err": {},
              "uuid": "15b6a64e-c45e-4cdd-a880-5a1734de0d40",
              "parentUUID": "83c74c97-ec44-4012-9532-3382ac54f0e5",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should not be able to login with invalid credentials",
              "fullTitle": "User SignIn should not be able to login with invalid credentials",
              "timedOut": false,
              "duration": 117,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "chai.request(config.base_url)\n            .post(auth_req.end_point)\n            .send(auth_req.invalid_credentials)\n            .end((err, res) => {\n                expect(res).to.have.status(409);\n                expect(res.body).to.have.property('status').eql(false);\n                expect(res.body.data).not.to.have.property('token');\n                expect(res.body.error).to.eql(auth_res.error);\n                done();\n            });",
              "err": {},
              "uuid": "e9342ae4-f3c3-4f75-8d13-3e99c84ebfe3",
              "parentUUID": "83c74c97-ec44-4012-9532-3382ac54f0e5",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "15b6a64e-c45e-4cdd-a880-5a1734de0d40",
            "e9342ae4-f3c3-4f75-8d13-3e99c84ebfe3"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 246,
          "root": false,
          "rootEmpty": false,
          "_timeout": 10000
        },
        {
          "uuid": "88fc904e-6412-487c-a528-c52ccea5baec",
          "title": "Category Operations",
          "fullFile": "/home/akshay/Documents/SDET/sdet-sat/app/test/api_tests/category_test.js",
          "file": "/app/test/api_tests/category_test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should return all the categories",
              "fullTitle": "Category Operations should return all the categories",
              "timedOut": false,
              "duration": 93,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "chai.request(config.base_url)\n            .get(category_req.end_point1)\n            .end((err, res) => {\n                expect(res).to.have.status(200);\n                expect(res.body).to.eql(category_res.all_categories);\n                done();\n            });",
              "err": {
                "message": "AssertionError: expected { Object (status, count, ...) } to deeply equal { Object (status, count, ...) }",
                "estack": "AssertionError: expected { Object (status, count, ...) } to deeply equal { Object (status, count, ...) }\n    at chai.request.get.end (app/test/api_tests/category_test.js:19:37)\n    at Test.Request.callback (node_modules/superagent/lib/node/index.js:785:12)\n    at IncomingMessage.<anonymous> (node_modules/superagent/lib/node/index.js:990:12)\n    at endReadableNT (_stream_readable.js:1094:12)\n    at process._tickCallback (internal/process/next_tick.js:63:19)",
                "diff": " {\n-   \"count\": 82\n+   \"count\": 81\n   \"data\": [\n     {\n       \"__v\": 0\n       \"_id\": \"5ef750fb512a154210ccf909\"\n           \"parent\": \"5f413825501ad62957df0ca2\"\n           \"status\": true\n           \"updated_at\": \"2020-08-24T17:36:03.511Z\"\n         }\n-         {\n-           \"__v\": 0\n-           \"_id\": \"5f43fde72dc50425e3bd8992\"\n-           \"created_at\": \"2020-08-24T17:50:31.696Z\"\n-           \"details\": \"This will have all home appliances\"\n-           \"name\": \"Home Appliances\"\n-           \"parent\": \"5f413825501ad62957df0ca2\"\n-           \"status\": true\n-           \"updated_at\": \"2020-08-24T17:50:31.696Z\"\n-         }\n       ]\n       \"updated_at\": \"2020-08-22T15:22:13.347Z\"\n     }\n     {\n       \"status\": true\n       \"sub_categories\": []\n       \"updated_at\": \"2020-08-24T17:36:03.511Z\"\n     }\n-     {\n-       \"__v\": 0\n-       \"_id\": \"5f43fde72dc50425e3bd8992\"\n-       \"created_at\": \"2020-08-24T17:50:31.696Z\"\n-       \"details\": \"This will have all home appliances\"\n-       \"name\": \"Home Appliances\"\n-       \"parent\": \"5f413825501ad62957df0ca2\"\n-       \"status\": true\n-       \"sub_categories\": []\n-       \"updated_at\": \"2020-08-24T17:50:31.696Z\"\n-     }\n   ]\n   \"error\": []\n   \"status\": true\n }\n"
              },
              "uuid": "1ed5b7b2-aec2-4110-9c65-ff0748ebc58e",
              "parentUUID": "88fc904e-6412-487c-a528-c52ccea5baec",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should create a new category",
              "fullTitle": "Category Operations should create a new category",
              "timedOut": false,
              "duration": 50,
              "state": "passed",
              "speed": "medium",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "chai.request(config.base_url)\n            .post(category_req.end_point1)\n            .set(\"authorization\", config.token)\n            .send(category_req.category)\n            .end((err, res) => {\n                expect(res).to.have.status(201);\n                expect(res.body).to.have.property('status').eql(true);\n                expect(res.body.data).excludingEvery(['_id', 'created_at', 'updated_at', '__v', 'status']).to.eql(category_res.create_category);\n                expect(res.body.error).to.eql([]);\n                done();\n            });",
              "err": {},
              "uuid": "2b843f50-477d-48e8-844e-846485033f70",
              "parentUUID": "88fc904e-6412-487c-a528-c52ccea5baec",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should create a new category when extra property is passed",
              "fullTitle": "Category Operations should create a new category when extra property is passed",
              "timedOut": false,
              "duration": 54,
              "state": "passed",
              "speed": "medium",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "chai.request(config.base_url)\n            .post(category_req.end_point1)\n            .set(\"authorization\", config.token)\n            .send(category_req.category_with_addedBy)\n            .end((err, res) => {\n                expect(res).to.have.status(201);\n                expect(res.body).to.have.property('status').eql(true);\n                expect(res.body.data).excludingEvery(['_id', 'created_at', 'updated_at', '__v', 'status']).to.eql(category_res.create_category);\n                expect(res.body.error).to.eql([]);\n                done();\n            });",
              "err": {},
              "uuid": "19ed6a6d-82d2-4cb0-b0fe-05b8c9db0b32",
              "parentUUID": "88fc904e-6412-487c-a528-c52ccea5baec",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return categories with requested category id",
              "fullTitle": "Category Operations should return categories with requested category id",
              "timedOut": false,
              "duration": 51,
              "state": "passed",
              "speed": "medium",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "chai.request(config.base_url)\n            .get(category_req.end_point1 + category_req.categoryId)\n            .end((err, res) => {\n                expect(res).to.have.status(200);\n                expect(res.body).to.eql(category_res.category);\n                done();\n            });",
              "err": {},
              "uuid": "953922eb-2578-44e4-a5b8-124f5d2ebfbf",
              "parentUUID": "88fc904e-6412-487c-a528-c52ccea5baec",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return products of reuested category id",
              "fullTitle": "Category Operations should return products of reuested category id",
              "timedOut": false,
              "duration": 52,
              "state": "passed",
              "speed": "medium",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "chai.request(config.base_url)\n            .get(category_req.end_point1 + category_req.categoryId + category_req.end_point2)\n            .end((err, res) => {\n                expect(res).to.have.status(200);\n                expect(res.body).to.eql(category_res.products);\n                done();\n            });",
              "err": {},
              "uuid": "5f19e679-4d4a-4663-9be0-a69378ace59b",
              "parentUUID": "88fc904e-6412-487c-a528-c52ccea5baec",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "2b843f50-477d-48e8-844e-846485033f70",
            "19ed6a6d-82d2-4cb0-b0fe-05b8c9db0b32",
            "953922eb-2578-44e4-a5b8-124f5d2ebfbf",
            "5f19e679-4d4a-4663-9be0-a69378ace59b"
          ],
          "failures": [
            "1ed5b7b2-aec2-4110-9c65-ff0748ebc58e"
          ],
          "pending": [],
          "skipped": [],
          "duration": 300,
          "root": false,
          "rootEmpty": false,
          "_timeout": 10000
        },
        {
          "uuid": "87344467-f56b-47f1-bcbd-39a18f29b997",
          "title": "Category Scenarios",
          "fullFile": "/home/akshay/Documents/SDET/sdet-sat/app/test/api_tests/category_test.js",
          "file": "/app/test/api_tests/category_test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should not return any category when wrong category id is passed",
              "fullTitle": "Category Scenarios should not return any category when wrong category id is passed",
              "timedOut": false,
              "duration": 24,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "chai.request(config.base_url)\n            .get(category_req.end_point1 + category_req.wrong_categoryId)\n            .end((err, res) => {\n                expect(res).to.have.status(200);\n                expect(res.body.count).to.eql(0);\n                expect(res.body.data).to.eql([]);\n                expect(res.body.error).to.eql([]);\n                done();\n            });",
              "err": {},
              "uuid": "403c1ad8-d46b-4709-a9b7-3ab8d284fe39",
              "parentUUID": "87344467-f56b-47f1-bcbd-39a18f29b997",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should give error when invalid category id is passed",
              "fullTitle": "Category Scenarios should give error when invalid category id is passed",
              "timedOut": false,
              "duration": 5,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "chai.request(config.base_url)\n            .get(category_req.end_point1 + category_req.invalid_categoryId)\n            .end((err, res) => {\n                expect(res).to.have.status(409);\n                expect(res.body.count).to.eql(0);\n                expect(res.body.data).to.eql([]);\n                expect(res.body.error[0].message).to.eql(category_res.error_message);\n                done();\n            });",
              "err": {},
              "uuid": "09be8e99-eac1-4313-822c-1c77faaf26aa",
              "parentUUID": "87344467-f56b-47f1-bcbd-39a18f29b997",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should not create new category if no token is passed",
              "fullTitle": "Category Scenarios should not create new category if no token is passed",
              "timedOut": false,
              "duration": 3,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "chai.request(config.base_url)\n            .post(category_req.end_point1)\n            .send(category_req.category)\n            .end((err, res) => {\n                expect(res).to.have.status(401);\n                done();\n            });",
              "err": {},
              "uuid": "2ab09a8b-d1ca-46fc-b720-b3a99792b2af",
              "parentUUID": "87344467-f56b-47f1-bcbd-39a18f29b997",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should not create new category if parent is not passed",
              "fullTitle": "Category Scenarios should not create new category if parent is not passed",
              "timedOut": false,
              "duration": 26,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "chai.request(config.base_url)\n            .post(category_req.end_point1)\n            .set(\"authorization\", config.token)\n            .send(category_req.category_without_parent)\n            .end((err, res) => {\n                expect(res).to.have.status(409);\n                expect(res.body).to.have.property('status').eql(false);\n                expect(res.body.error).to.eql(category_res.error_message_parent);\n                done();\n            });",
              "err": {},
              "uuid": "e56b22b1-be3b-429c-8d5e-69071fac1a30",
              "parentUUID": "87344467-f56b-47f1-bcbd-39a18f29b997",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should not create new category if category name is not passed",
              "fullTitle": "Category Scenarios should not create new category if category name is not passed",
              "timedOut": false,
              "duration": 26,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "chai.request(config.base_url)\n            .post(category_req.end_point1)\n            .set(\"authorization\", config.token)\n            .send(category_req.category_without_name)\n            .end((err, res) => {\n                expect(res).to.have.status(409);\n                expect(res.body).to.have.property('status').eql(false);\n                expect(res.body.error).to.eql(category_res.error_message_name);\n                done();\n            });",
              "err": {},
              "uuid": "35eeb86f-4dcc-45d1-adfb-d61b049ad6d9",
              "parentUUID": "87344467-f56b-47f1-bcbd-39a18f29b997",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should not create new category if category details is not passed",
              "fullTitle": "Category Scenarios should not create new category if category details is not passed",
              "timedOut": false,
              "duration": 25,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "chai.request(config.base_url)\n            .post(category_req.end_point1)\n            .set(\"authorization\", config.token)\n            .send(category_req.category_without_details)\n            .end((err, res) => {\n                expect(res).to.have.status(409);\n                expect(res.body).to.have.property('status').eql(false);\n                expect(res.body.error).to.eql(category_res.error_message_details);\n                done();\n            });",
              "err": {},
              "uuid": "656f81bf-5869-411d-8d47-c5bcef41cb1c",
              "parentUUID": "87344467-f56b-47f1-bcbd-39a18f29b997",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return any product if wrong category id is passed",
              "fullTitle": "Category Scenarios should return any product if wrong category id is passed",
              "timedOut": false,
              "duration": 24,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "chai.request(config.base_url)\n            .get(category_req.end_point1 + category_req.wrong_categoryId + category_req.end_point2)\n            .end((err, res) => {\n                expect(res).to.have.status(200);\n                expect(res.body.count).to.eql(0);\n                expect(res.body.data).to.eql([]);\n                expect(res.body.error).to.eql([]);\n                done();\n            });",
              "err": {},
              "uuid": "a129c660-1a15-418f-b4ea-37bbdbadcc13",
              "parentUUID": "87344467-f56b-47f1-bcbd-39a18f29b997",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "403c1ad8-d46b-4709-a9b7-3ab8d284fe39",
            "09be8e99-eac1-4313-822c-1c77faaf26aa",
            "2ab09a8b-d1ca-46fc-b720-b3a99792b2af",
            "e56b22b1-be3b-429c-8d5e-69071fac1a30",
            "35eeb86f-4dcc-45d1-adfb-d61b049ad6d9",
            "656f81bf-5869-411d-8d47-c5bcef41cb1c",
            "a129c660-1a15-418f-b4ea-37bbdbadcc13"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 133,
          "root": false,
          "rootEmpty": false,
          "_timeout": 10000
        },
        {
          "uuid": "fac00d1d-530f-42ca-8608-96fb5024034a",
          "title": "Product Operations",
          "fullFile": "/home/akshay/Documents/SDET/sdet-sat/app/test/api_tests/product_test.js",
          "file": "/app/test/api_tests/product_test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should return all the products in requested category",
              "fullTitle": "Product Operations should return all the products in requested category",
              "timedOut": false,
              "duration": 52,
              "state": "passed",
              "speed": "medium",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "chai.request(config.base_url)\n            .get(product_req.end_point1 + product_req.categoryId)\n            .end((err, res) => {\n                expect(res).to.have.status(200);\n                expect(res.body).to.eql(product_res.category_products);\n                done();\n            });",
              "err": {},
              "uuid": "70f3cb94-151d-4091-a8ec-fb7e0c21791d",
              "parentUUID": "fac00d1d-530f-42ca-8608-96fb5024034a",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should create a new product",
              "fullTitle": "Product Operations should create a new product",
              "timedOut": false,
              "duration": 60,
              "state": "passed",
              "speed": "medium",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "chai.request(config.base_url)\n            .post(product_req.end_point2)\n            .set(\"authorization\", config.token)\n            .send(product_req.product)\n            .end((err, res) => {\n                expect(res).to.have.status(201);\n                expect(res.body).to.have.property('status').eql(true);\n                expect(res.body.data).excludingEvery(['_id', 'created_at', 'updated_at', '__v', 'status']).to.eql(product_res.create_product);\n                expect(res.body.error).to.eql([]);\n                done();\n            });",
              "err": {},
              "uuid": "6e05a0c0-100f-4ac8-ab03-91b7dea0c8fc",
              "parentUUID": "fac00d1d-530f-42ca-8608-96fb5024034a",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should create a new product when extra properties are added",
              "fullTitle": "Product Operations should create a new product when extra properties are added",
              "timedOut": false,
              "duration": 62,
              "state": "passed",
              "speed": "medium",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "chai.request(config.base_url)\n            .post(product_req.end_point2)\n            .set(\"authorization\", config.token)\n            .send(product_req.product_with_rating)\n            .end((err, res) => {\n                expect(res).to.have.status(201);\n                expect(res.body).to.have.property('status').eql(true);\n                expect(res.body.data).excludingEvery(['_id', 'created_at', 'updated_at', '__v', 'status']).to.eql(product_res.create_product);\n                expect(res.body.error).to.eql([]);\n                done();\n            });",
              "err": {},
              "uuid": "98837a1f-d23a-40bf-9c62-db79339ee8dd",
              "parentUUID": "fac00d1d-530f-42ca-8608-96fb5024034a",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return products with requested product id",
              "fullTitle": "Product Operations should return products with requested product id",
              "timedOut": false,
              "duration": 63,
              "state": "passed",
              "speed": "medium",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "chai.request(config.base_url)\n            .get(product_req.end_point2 + product_req.productId)\n            .end((err, res) => {\n                expect(res).to.have.status(200);\n                expect(res.body).to.eql(product_res.product);\n                done();\n            });",
              "err": {},
              "uuid": "d41f06f2-3272-43af-8722-1fc40b52d918",
              "parentUUID": "fac00d1d-530f-42ca-8608-96fb5024034a",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should update requested product",
              "fullTitle": "Product Operations should update requested product",
              "timedOut": false,
              "duration": 96,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "chai.request(config.base_url)\n            .put(product_req.end_point3)\n            .set(\"authorization\", config.token)\n            .send(product_req.update_product)\n            .end((err, res) => {\n                expect(res).to.have.status(200);\n                expect(res.body).to.have.property('status').eql(true);\n                done();\n            });",
              "err": {},
              "uuid": "ed472296-b5ff-497d-9624-56d76c1834d4",
              "parentUUID": "fac00d1d-530f-42ca-8608-96fb5024034a",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "70f3cb94-151d-4091-a8ec-fb7e0c21791d",
            "6e05a0c0-100f-4ac8-ab03-91b7dea0c8fc",
            "98837a1f-d23a-40bf-9c62-db79339ee8dd",
            "d41f06f2-3272-43af-8722-1fc40b52d918",
            "ed472296-b5ff-497d-9624-56d76c1834d4"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 333,
          "root": false,
          "rootEmpty": false,
          "_timeout": 10000
        },
        {
          "uuid": "b3ebb441-7a96-490b-8755-b5bdb578350c",
          "title": "Product Scenarios",
          "fullFile": "/home/akshay/Documents/SDET/sdet-sat/app/test/api_tests/product_test.js",
          "file": "/app/test/api_tests/product_test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should not return any products if wrong category id id passed",
              "fullTitle": "Product Scenarios should not return any products if wrong category id id passed",
              "timedOut": false,
              "duration": 34,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "chai.request(config.base_url)\n            .get(product_req.end_point1 + product_req.wrong_categoryId)\n            .end((err, res) => {\n                expect(res).to.have.status(200);\n                expect(res.body.count).to.eql(0);\n                expect(res.body.data).to.eql([]);\n                expect(res.body.error).to.eql([]);\n                done();\n            });",
              "err": {},
              "uuid": "72054294-a7d2-405f-a1fb-8ce53b5ac9c1",
              "parentUUID": "b3ebb441-7a96-490b-8755-b5bdb578350c",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should not create new product if no token is passed",
              "fullTitle": "Product Scenarios should not create new product if no token is passed",
              "timedOut": false,
              "duration": 11,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "chai.request(config.base_url)\n            .post(product_req.end_point2)\n            .send(product_req.product)\n            .end((err, res) => {\n                expect(res).to.have.status(401);\n                done();\n            });",
              "err": {},
              "uuid": "419c37a8-4273-4077-a2eb-50d08c811270",
              "parentUUID": "b3ebb441-7a96-490b-8755-b5bdb578350c",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should not create new product if name is not passed",
              "fullTitle": "Product Scenarios should not create new product if name is not passed",
              "timedOut": false,
              "duration": 43,
              "state": "passed",
              "speed": "medium",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "chai.request(config.base_url)\n            .post(product_req.end_point2)\n            .set(\"authorization\", config.token)\n            .send(product_req.product_without_name)\n            .end((err, res) => {\n                expect(res).to.have.status(409);\n                expect(res.body).to.have.property('status').eql(false);\n                expect(res.body.error).to.eql(product_res.error_message_name);\n                done();\n            });",
              "err": {},
              "uuid": "c28e7c56-8826-4a98-8543-cbd624d31bf5",
              "parentUUID": "b3ebb441-7a96-490b-8755-b5bdb578350c",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should not create new product if any category is not passed",
              "fullTitle": "Product Scenarios should not create new product if any category is not passed",
              "timedOut": false,
              "duration": 27,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "chai.request(config.base_url)\n            .post(product_req.end_point2)\n            .set(\"authorization\", config.token)\n            .send(product_req.product_without_category)\n            .end((err, res) => {\n                expect(res).to.have.status(409);\n                expect(res.body).to.have.property('status').eql(false);\n                expect(res.body.error).to.eql(product_res.error_message_category);\n                done();\n            });",
              "err": {},
              "uuid": "eacb8100-96db-418d-9052-cb74457a6dd5",
              "parentUUID": "b3ebb441-7a96-490b-8755-b5bdb578350c",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should not create new product if category is not passed as an array",
              "fullTitle": "Product Scenarios should not create new product if category is not passed as an array",
              "timedOut": false,
              "duration": 22,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "chai.request(config.base_url)\n            .post(product_req.end_point2)\n            .set(\"authorization\", config.token)\n            .send(product_req.product_without_category_array)\n            .end((err, res) => {\n                expect(res).to.have.status(409);\n                expect(res.body).to.have.property('status').eql(false);\n                expect(res.body.error).to.eql(product_res.error_message_category);\n                done();\n            });",
              "err": {},
              "uuid": "29a17d05-fb9f-4bae-a1a3-8d5f7afa4ae2",
              "parentUUID": "b3ebb441-7a96-490b-8755-b5bdb578350c",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should not create new product if description is not passed",
              "fullTitle": "Product Scenarios should not create new product if description is not passed",
              "timedOut": false,
              "duration": 26,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "chai.request(config.base_url)\n            .post(product_req.end_point2)\n            .set(\"authorization\", config.token)\n            .send(product_req.product_without_description)\n            .end((err, res) => {\n                expect(res).to.have.status(409);\n                expect(res.body).to.have.property('status').eql(false);\n                expect(res.body.error).to.eql(product_res.error_message_description);\n                done();\n            });",
              "err": {},
              "uuid": "c53a4a53-f013-46cf-b0c7-9e0ffe8ab9ef",
              "parentUUID": "b3ebb441-7a96-490b-8755-b5bdb578350c",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should not create new product if price is not passed",
              "fullTitle": "Product Scenarios should not create new product if price is not passed",
              "timedOut": false,
              "duration": 31,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "chai.request(config.base_url)\n            .post(product_req.end_point2)\n            .set(\"authorization\", config.token)\n            .send(product_req.product_without_price)\n            .end((err, res) => {\n                expect(res).to.have.status(409);\n                expect(res.body).to.have.property('status').eql(false);\n                expect(res.body.error).to.eql(product_res.error_message_price);\n                done();\n            });",
              "err": {},
              "uuid": "3a91a9c0-9eb6-4ccf-a4cd-8d3669539a9b",
              "parentUUID": "b3ebb441-7a96-490b-8755-b5bdb578350c",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should not create new product if price is not a number",
              "fullTitle": "Product Scenarios should not create new product if price is not a number",
              "timedOut": false,
              "duration": 44,
              "state": "passed",
              "speed": "medium",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "chai.request(config.base_url)\n            .post(product_req.end_point2)\n            .set(\"authorization\", config.token)\n            .send(product_req.product_string_price)\n            .end((err, res) => {\n                expect(res).to.have.status(409);\n                expect(res.body).to.have.property('status').eql(false);\n                expect(res.body.error).to.eql(product_res.error_message_price);\n                done();\n            });",
              "err": {},
              "uuid": "17ef435a-137d-4b32-9467-2fdf0667f8f8",
              "parentUUID": "b3ebb441-7a96-490b-8755-b5bdb578350c",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should not return any product if wrong product id is paseed",
              "fullTitle": "Product Scenarios should not return any product if wrong product id is paseed",
              "timedOut": false,
              "duration": 30,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "chai.request(config.base_url)\n            .get(product_req.end_point2 + product_req.wrong_productId)\n            .end((err, res) => {\n                expect(res).to.have.status(200);\n                expect(res.body.count).to.eql(0);\n                expect(res.body.data).to.eql([]);\n                expect(res.body.error).to.eql([]);\n                done();\n            });",
              "err": {},
              "uuid": "690d70dc-d16d-45c1-b8e5-6f3ad756c75b",
              "parentUUID": "b3ebb441-7a96-490b-8755-b5bdb578350c",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should not update product if token is not passed",
              "fullTitle": "Product Scenarios should not update product if token is not passed",
              "timedOut": false,
              "duration": 4,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "chai.request(config.base_url)\n            .put(product_req.end_point3)\n            .send(product_req.update_product)\n            .end((err, res) => {\n                expect(res).to.have.status(401);\n                done();\n            });",
              "err": {},
              "uuid": "3f027c1b-4c28-4c01-b806-72fa8de0464b",
              "parentUUID": "b3ebb441-7a96-490b-8755-b5bdb578350c",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should not update product if product id is not passed as parameter",
              "fullTitle": "Product Scenarios should not update product if product id is not passed as parameter",
              "timedOut": false,
              "duration": 5,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "chai.request(config.base_url)\n            .put(product_req.end_point2)\n            .set(\"authorization\", config.token)\n            .send(product_req.update_product)\n            .end((err, res) => {\n                expect(res).to.have.status(404);\n                done();\n            });",
              "err": {},
              "uuid": "f18434bc-2349-4aee-af4f-557bd0feb6f8",
              "parentUUID": "b3ebb441-7a96-490b-8755-b5bdb578350c",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should not update product if name is not passed",
              "fullTitle": "Product Scenarios should not update product if name is not passed",
              "timedOut": false,
              "duration": 28,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "chai.request(config.base_url)\n            .put(product_req.end_point3)\n            .set(\"authorization\", config.token)\n            .send(product_req.product_without_name)\n            .end((err, res) => {\n                expect(res).to.have.status(409);\n                expect(res.body).to.have.property('status').eql(false);\n                expect(res.body.error).to.eql(product_res.error_message_name);\n                done();\n            });",
              "err": {},
              "uuid": "59b8aed1-0fed-4e0e-9005-c62a55bddbbf",
              "parentUUID": "b3ebb441-7a96-490b-8755-b5bdb578350c",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should not update product if category is not passed",
              "fullTitle": "Product Scenarios should not update product if category is not passed",
              "timedOut": false,
              "duration": 24,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "chai.request(config.base_url)\n            .put(product_req.end_point3)\n            .set(\"authorization\", config.token)\n            .send(product_req.product_without_category)\n            .end((err, res) => {\n                expect(res).to.have.status(409);\n                expect(res.body).to.have.property('status').eql(false);\n                expect(res.body.error).to.eql(product_res.error_message_category);\n                done();\n            });",
              "err": {},
              "uuid": "0d89d192-db5a-45e5-a372-e2367346b6c7",
              "parentUUID": "b3ebb441-7a96-490b-8755-b5bdb578350c",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should not update product if category is not passed as array",
              "fullTitle": "Product Scenarios should not update product if category is not passed as array",
              "timedOut": false,
              "duration": 24,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "chai.request(config.base_url)\n            .put(product_req.end_point3)\n            .set(\"authorization\", config.token)\n            .send(product_req.product_without_category_array)\n            .end((err, res) => {\n                expect(res).to.have.status(409);\n                expect(res.body).to.have.property('status').eql(false);\n                expect(res.body.error).to.eql(product_res.error_message_category);\n                done();\n            });",
              "err": {},
              "uuid": "754c9c73-4447-4ca9-afda-a3e3cdf3cb89",
              "parentUUID": "b3ebb441-7a96-490b-8755-b5bdb578350c",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should not update product if description is not passed",
              "fullTitle": "Product Scenarios should not update product if description is not passed",
              "timedOut": false,
              "duration": 25,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "chai.request(config.base_url)\n            .put(product_req.end_point3)\n            .set(\"authorization\", config.token)\n            .send(product_req.product_without_description)\n            .end((err, res) => {\n                expect(res).to.have.status(409);\n                expect(res.body).to.have.property('status').eql(false);\n                expect(res.body.error).to.eql(product_res.error_message_description);\n                done();\n            });",
              "err": {},
              "uuid": "f67f7d0e-918f-4445-b3d2-55319a04159b",
              "parentUUID": "b3ebb441-7a96-490b-8755-b5bdb578350c",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should not update product if price is not passed",
              "fullTitle": "Product Scenarios should not update product if price is not passed",
              "timedOut": false,
              "duration": 25,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "chai.request(config.base_url)\n            .put(product_req.end_point3)\n            .set(\"authorization\", config.token)\n            .send(product_req.product_without_price)\n            .end((err, res) => {\n                expect(res).to.have.status(409);\n                expect(res.body).to.have.property('status').eql(false);\n                expect(res.body.error).to.eql(product_res.error_message_price);\n                done();\n            });",
              "err": {},
              "uuid": "9553bdfd-5d6a-49dd-b526-936dda6d44f0",
              "parentUUID": "b3ebb441-7a96-490b-8755-b5bdb578350c",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should not update product if price is not passed as number",
              "fullTitle": "Product Scenarios should not update product if price is not passed as number",
              "timedOut": false,
              "duration": 25,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "chai.request(config.base_url)\n            .put(product_req.end_point3)\n            .set(\"authorization\", config.token)\n            .send(product_req.product_string_price)\n            .end((err, res) => {\n                expect(res).to.have.status(409);\n                expect(res.body).to.have.property('status').eql(false);\n                expect(res.body.error).to.eql(product_res.error_message_price);\n                done();\n            });",
              "err": {},
              "uuid": "f0ac53c0-0f30-47bf-ae61-0a36c9dc63d9",
              "parentUUID": "b3ebb441-7a96-490b-8755-b5bdb578350c",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "72054294-a7d2-405f-a1fb-8ce53b5ac9c1",
            "419c37a8-4273-4077-a2eb-50d08c811270",
            "c28e7c56-8826-4a98-8543-cbd624d31bf5",
            "eacb8100-96db-418d-9052-cb74457a6dd5",
            "29a17d05-fb9f-4bae-a1a3-8d5f7afa4ae2",
            "c53a4a53-f013-46cf-b0c7-9e0ffe8ab9ef",
            "3a91a9c0-9eb6-4ccf-a4cd-8d3669539a9b",
            "17ef435a-137d-4b32-9467-2fdf0667f8f8",
            "690d70dc-d16d-45c1-b8e5-6f3ad756c75b",
            "3f027c1b-4c28-4c01-b806-72fa8de0464b",
            "f18434bc-2349-4aee-af4f-557bd0feb6f8",
            "59b8aed1-0fed-4e0e-9005-c62a55bddbbf",
            "0d89d192-db5a-45e5-a372-e2367346b6c7",
            "754c9c73-4447-4ca9-afda-a3e3cdf3cb89",
            "f67f7d0e-918f-4445-b3d2-55319a04159b",
            "9553bdfd-5d6a-49dd-b526-936dda6d44f0",
            "f0ac53c0-0f30-47bf-ae61-0a36c9dc63d9"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 428,
          "root": false,
          "rootEmpty": false,
          "_timeout": 10000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 10000
    }
  ],
  "meta": {
    "mocha": {
      "version": "8.1.1"
    },
    "mochawesome": {
      "options": {
        "quiet": false,
        "reportFilename": "satApiTests",
        "saveHtml": true,
        "saveJson": true,
        "consoleReporter": "spec",
        "useInlineDiffs": false,
        "code": true
      },
      "version": "6.1.1"
    },
    "marge": {
      "options": {
        "reportFilename": "satApiTests"
      },
      "version": "5.1.0"
    }
  }
}